import curses
from curses import KEY_RIGHT, KEY_LEFT, KEY_UP, KEY_DOWN
from random import randint
import webbrowser

def main(stdscr):
    # Initialize the screen
    curses.curs_set(0)  # Hide the cursor
    stdscr.nodelay(1)  # Make getch() non-blocking
    stdscr.timeout(100)  # Set delay for the game loop

    sh, sw = stdscr.getmaxyx()  # Get screen height and width

    # Initial snake and food
    snake_x = sw // 4
    snake_y = sh // 2
    snake = [
        [snake_y, snake_x],
        [snake_y, snake_x - 1],
        [snake_y, snake_x - 2]
    ]
    food = [sh // 2, sw // 2]

    # Initialize color pairs
    curses.start_color()
    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)

    stdscr.addch(food[0], food[1], curses.ACS_PI, curses.color_pair(2))  # Display the food

    # Game logic variables
    key = KEY_RIGHT  # Initial direction
    score = 0

    while True:
        next_key = stdscr.getch()
        if next_key == -1:
            next_key = key
        if next_key in [KEY_LEFT, KEY_RIGHT, KEY_UP, KEY_DOWN, ord('w'), ord('a'), ord('s'), ord('d')]:
            key = next_key

        # WASD key handling
        if key == ord('w'):
            key = KEY_UP
        elif key == ord('a'):
            key = KEY_LEFT
        elif key == ord('s'):
            key = KEY_DOWN
        elif key == ord('d'):
            key = KEY_RIGHT

        # Calculate the new coordinates of the head of the snake
        new_head = [snake[0][0], snake[0][1]]

        if key == KEY_DOWN:
            new_head[0] += 1
        if key == KEY_UP:
            new_head[0] -= 1
        if key == KEY_LEFT:
            new_head[1] -= 1
        if key == KEY_RIGHT:
            new_head[1] += 1

        snake.insert(0, new_head)

        # Check if snake has eaten the food
        if snake[0] == food:
            score += 1
            food = None
            while food is None:
                nf = [
                    randint(1, sh - 2),
                    randint(1, sw - 2)
                ]
                food = nf if nf not in snake else None
            stdscr.addch(food[0], food[1], curses.ACS_PI, curses.color_pair(2))
        else:
            tail = snake.pop()
            stdscr.addch(tail[0], tail[1], ' ')

        # Check if snake has hit the border or itself
        if (
            snake[0][0] in [0, sh-1] or
            snake[0][1] in [0, sw-1] or
            snake[0] in snake[1:]
        ):
            stdscr.addstr(sh // 2, sw // 2 - len("Game Over!") // 2, "Game Over!", curses.color_pair(1))
            stdscr.addstr(sh // 2 + 1, sw // 2 - len(f"Score: {score}") // 2, f"Score: {score}")
            stdscr.refresh()
            stdscr.nodelay(0)
            stdscr.getch()
            break

        stdscr.addch(snake[0][0], snake[0][1], curses.ACS_CKBOARD)

        # Display score
        stdscr.addstr(0, 2, 'Score: ' + str(score) + ' ')

        # Display "BELLCANOV" and GitHub link in the bottom right corner in red
        stdscr.addstr(sh - 1, sw - len("BELLCANOV") - 1, "BELLCANOV", curses.color_pair(1))
        stdscr.addstr(sh - 1, 0, "User: akira-a23", curses.color_pair(1))

        stdscr.refresh()

        # Open GitHub profile if "BELLCANOV" is clicked
        if next_key == ord('b'):
            webbrowser.open('https://github.com/akira-a23')

if __name__ == "__main__":
    curses.wrapper(main)
